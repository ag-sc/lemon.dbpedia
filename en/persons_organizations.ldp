@prefix dbpedia: <http://dbpedia.org/ontology/> .
@prefix lex: <http://github.com/cunger/lemon.dbpedia/target/dbpedia_en#> .

Lexicon(<http://github.com/cunger/lemon.dbpedia/target/dbpedia_en#>,"en",

  //// Classes

  ClassNoun("organisation",dbpedia:Organisation),
  ClassNoun(["non-profit"/adjective "organisation"/noun],<http://dbpedia.org/ontology/Non-ProfitOrganisation>),
  ClassNoun("company",dbpedia:Company),
  ClassNoun(["political"/adjective "party"/noun],dbpedia:PoliticalParty),
  ClassNoun("party",dbpedia:PoliticalParty),
  ClassNoun(["trade"/noun "union"/noun],dbpedia:TradeUnion),
  ClassNoun(["labor"/noun "union"/noun],dbpedia:TradeUnion),
  ClassNoun("newspaper",dbpedia:Newspaper),
  ClassNoun("paper",dbpedia:Newspaper),
  ClassNoun("journal",dbpedia:Newspaper),
  ClassNoun("magazine",dbpedia:Magazine),
  ClassNoun("periodical",dbpedia:Magazine),

  ClassNoun("person",dbpedia:Person),

  ClassNoun(["ethnic"/adjective "group"/noun],dbpedia:EthnicGroup),

  ClassNoun("scientist",dbpedia:Scientist),
  ClassNoun("researcher",dbpedia:Scientist),
  ClassNoun("historian",lex:Historian),
  ClassNoun("chemist",lex:Chemist),
  ClassNoun("biologist",lex:Biologist),
  ClassNoun("economist",lex:Economist),
  ClassNoun("teacher",lex:Teacher),
  ClassNoun("surfer",lex:Surfer),
  ClassNoun("revolutionary",lex:Revolutionary),
  ClassNoun("poet",lex:Poet),
  ClassNoun("architect",dbpedia:Architect),
  ClassNoun("journalist",dbpedia:Journalist),
  ClassNoun("model",dbpedia:Model),
  ClassNoun("celebrity",dbpedia:Celebrity),
  ClassNoun("philosopher",dbpedia:Philosopher),

  ClassNoun("Jew",lex:Jew),
  IntersectiveAdjective("Jewish",lex:Jew),
  ClassNoun(["African"/adjective "American"/adjective],lex:AfricanAmerican),
  IntersectiveAdjective(["African"/adjective "American"/adjective],lex:AfricanAmerican),

  ClassNoun("Protestant",lex:Protestant),
  IntersectiveAdjective("Protestant",lex:Protestant),

  ClassNoun("politician",dbpedia:Politician),
  ClassNoun("governor",dbpedia:Governor),
  ClassNoun("president",dbpedia:President),
  ClassNoun(["vice"/noun "president"/noun],dbpedia:VicePresident),
  ClassNoun("monarch",dbpedia:Monarch),
  ClassNoun(["prime"/adjective "minister"/noun],dbpedia:PrimeMinister),
  ClassNoun("premier",dbpedia:PrimeMinister),
  ClassNoun("chancellor",dbpedia:Chancellor),
  ClassNoun("mayor",dbpedia:Mayor),
  ClassNoun("senator",dbpedia:Senator),
  ClassNoun("ambassador",dbpedia:Ambassador),

  ClassNoun("bishop",dbpedia:ChristianBishop),
  ClassNoun("cleric",dbpedia:Cleric),
  ClassNoun("clerk",dbpedia:Cleric),
  ClassNoun("saint",dbpedia:Saint),
  ClassNoun("cardinal",dbpedia:Cardinal),
  ClassNoun("pope",dbpedia:Pope),
  ClassNoun("priest",dbpedia:Priest),

  ClassNoun("criminal",dbpedia:Criminal),
  ClassNoun("thug",dbpedia:Criminal),
  ClassNoun("judge",dbpedia:Judge),
  ClassNoun("magistrate",dbpedia:Judge), 


  //// Properties 

  // birthDate, birthYear, birthPlace

  RelationalNoun(["birth"/noun "date"/noun],dbpedia:birthDate,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg),  
  RelationalNoun(["date"/noun "of"/preposition "birth"/noun],dbpedia:birthDate,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg) with plural "dates of birth",
    
  ConsequenceVerb("bear",dbpedia:birthDate,
     propSubj = lex:child as Subject, 
     propObj  = lex:date as PrepositionalObject("on")),

  ConsequenceVerb("bear",dbpedia:birthYear,
     propSubj = lex:child as Subject, 
     propObj  = lex:year as PrepositionalObject("in")),
  ConsequenceVerb("bear",dbpedia:birthPlace,
     propSubj = lex:child as Subject, 
     propObj  = lex:place as PrepositionalObject("in")),
  ConsequenceVerb("bear",dbpedia:birthPlace,
     propSubj = lex:child as Subject, 
     propObj  = lex:birthCountry as PrepositionalObject("in")),

  RelationalNoun(["birth"/noun "place"/noun],dbpedia:birthPlace,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg),  
  RelationalNoun(["place"/noun "of"/preposition "birth"/noun],dbpedia:birthPlace,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg) with plural "places of birth",

  // deathDate, deathYear, deathPlace

  RelationalNoun(["death"/noun "date"/noun],dbpedia:deathDate,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg),  

  StateVerb("die",dbpedia:deathDate,
     propObj = PrepositionalObject("on")),
  StateVerb("die",dbpedia:deathYear,
     propObj = PrepositionalObject("in")),
  StateVerb("die",dbpedia:deathPlace,
     propObj = PrepositionalObject("in")),

  RelationalNoun(["death"/noun "place"/noun],dbpedia:deathPlace,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg), 
  RelationalNoun(["place"/noun "of"/preposition "death"/noun],dbpedia:deathPlace,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg) with plural "places of death",


  // spouse

  RelationalNoun("spouse",dbpedia:spouse,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg),  
  RelationalNoun("wife",dbpedia:spouse,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg), 
  RelationalNoun("husband",dbpedia:spouse,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg), 

  StateVerb("marry",dbpedia:spouse),

  ConsequenceVerb("marry",dbpedia:spouse,
     propSubj = lex:partner1 as Subject, 
     propObj  = lex:partner2 as PrepositionalObject("to")),


  // influenced 

  StateVerb("influence",dbpedia:influenced),


  // ethnicity, religion 

  RelationalNoun("ethnicity",dbpedia:ethnicity,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg),   

  RelationalNoun("religion",dbpedia:religion,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg),


  // university 

  RelationalNoun("university",dbpedia:university,
     propSubj=PossessiveAdjunct,
     propObj=CopulativeArg), 

  StateVerb("study",dbpedia:university,
     propObj = PrepositionalObject("at")),

  // field 

  RelationalNoun("field",dbpedia:field,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg), 

  StateVerb("work",dbpedia:field,
     propObj = PrepositionalObject("on")),


  // profession, occupation 

  RelationalNoun("profession",dbpedia:profession,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg), 

  RelationalNoun("occupation",dbpedia:occupation,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg), 

  StateVerb("work",dbpedia:profession,
     propObj = PrepositionalObject("as")),
  StateVerb("work",dbpedia:occupation,
     propObj = PrepositionalObject("as")),


  // rector, viceChancellor, runningMate

  RelationalNoun("rector",dbpedia:rector,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg), 

  RelationalNoun("principal",dbpedia:rector,
     propSubj = PossessiveAdjunct restrictedTo dbpedia:School,
     propObj  = CopulativeArg), 

  RelationalNoun(["vice"/noun "chancellor"/noun],dbpedia:viceChancellor,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg), 

  RelationalNoun(["running"/noun "mate"/noun],dbpedia:runningMate,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg), 

  // board 

  RelationalNoun(["board"/noun "member"/noun],dbpedia:board,
     propSubj = PrepositionalObject("at"),
     propObj  = CopulativeArg), 


  // canonizedPlace 

  ConsequenceVerb("canonize",dbpedia:canonizedPlace,
     propSubj=lex:person as Subject, 
     propObj=lex:place as PrepositionalObject("in")),

  // patron 

  RelationalNoun("patron",dbpedia:patron,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg), 
  RelationalNoun(["patron"/noun "saint"/noun],dbpedia:patron,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg), 


  // hometown, nationality 

  RelationalNoun(["home"/noun "town"/noun],dbpedia:homeTown,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg), 

  RelationalNoun(["home"/noun "country"/noun],dbpedia:nationality,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg restrictedTo dbpedia:Country ), 

  StateVerb("come",dbpedia:homeTown,
     propObj = PrepositionalObject("from")),
  StateVerb("come",dbpedia:nationality,
     propObj = PrepositionalObject("from") restrictedTo dbpedia:Place),


  // birthName, formerName, pseudonym

  RelationalNoun(["birth"/noun "name"/noun],dbpedia:birthName,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg), 

  RelationalNoun(["former"/noun "name"/noun],dbpedia:formerName,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg), 

  RelationalNoun("pseudonym",dbpedia:pseudonym,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg),


  // weight 

  RelationalNoun("weight",dbpedia:weight,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg), 

  StateVerb("weigh",dbpedia:weight),


  // manufacturer 

  RelationalNoun("manufacturer",dbpedia:manufacturer,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg), 

  StateVerb("manufacture",dbpedia:manufacturer,
     propSubj = DirectObject,
     propObj  = Subject), 
  StateVerb("produce",dbpedia:manufacturer,
     propSubj = DirectObject,
     propObj  = Subject), 


  // formationDate 

  RelationalNoun(["formation"/noun "date"/noun],dbpedia:formationDate,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg), 

  ConsequenceVerb("form",dbpedia:formationDate,
     propSubj = lex:organization as Subject, 
     propObj  = lex:date as PrepositionalObject("on")),
  ConsequenceVerb("found",dbpedia:formationDate,
     propSubj = lex:organization as Subject, 
     propObj  = lex:date as PrepositionalObject("on")),
  ConsequenceVerb("establish",dbpedia:formationDate,
     propSubj = lex:organization as Subject, 
     propObj  = lex:date as PrepositionalObject("on")),

  // foundationPlace 

  RelationalNoun(["foundation"/noun "place"/noun],dbpedia:foundationPlace,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg), 

  ConsequenceVerb("found",dbpedia:foundationPlace,
     propSubj = lex:organization as Subject, 
     propObj  = lex:date as PrepositionalObject("in")),


  // mascot 

  RelationalNoun("mascot",dbpedia:mascot,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg) 



)
