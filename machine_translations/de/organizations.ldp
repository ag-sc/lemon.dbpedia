@prefix dbpedia:  <http://dbpedia.org/ontology/> .
@prefix resource: <http://dbpedia.org/resource/> .
@prefix lex: <http://github.com/cunger/lemon.dbpedia/target/dbpedia_en#> .

Lexicon(<http://github.com/cunger/lemon.dbpedia/target/dbpedia_en_6#>,"en",

  //// Classes

  ClassNoun("Marktorganisation",dbpedia:Organisation),
  ClassNoun(["Marktorganisation"/noun "Mitglied"/noun],dbpedia:OrganisationMember),
  ClassNoun(["non-profit"/adjective "Marktorganisation"/noun],<http://dbpedia.org/ontology/Non-ProfitOrganisation>),
  ClassNoun(["geopolitischen"/adjective "Marktorganisation"/noun],<http://dbpedia.org/ontology/GeopoliticalOrganisation>),
  ClassNoun(["Regierung"/noun "Agentur"/noun],dbpedia:GovernmentAgency),

  ClassNoun("Gruppe",dbpedia:Group),
  ClassNoun("Begünstigten",dbpedia:Company),
  ClassNoun("Luftverkehrsgesellschaft",dbpedia:Airline),

  ClassNoun(["erzieherischen"/adjective "Träger"/noun],dbpedia:EducationalInstitution),
  ClassNoun("Schule",dbpedia:School),
  ClassNoun(["Samba"/noun "Schule"/noun],dbpedia:SambaSchool),
  ClassNoun("College",dbpedia:College),
  ClassNoun("Universität",dbpedia:University),
  ClassNoun("Bibliotheks-",dbpedia:Library),

  ClassNoun(["politische"/adjective "party"/noun],dbpedia:PoliticalParty),
  ClassNoun("party",dbpedia:PoliticalParty),
  ClassNoun(["tauschen"/noun "Gewerkschaft"/noun],dbpedia:TradeUnion),
  ClassNoun(["Arbeiter"/noun "Gewerkschaft"/noun],dbpedia:TradeUnion),

  ClassNoun(["Büro-"/adjective "bestellen"/noun],dbpedia:ClericalOrder),


  //// Properties 

  RelationalAdjective("lokalisiert",dbpedia:locationCity,
    relationalArg = PrepositionalObject("in")),
  RelationalAdjective("lokalisiert",dbpedia:locationCountry,
    relationalArg = PrepositionalObject("in")),
  RelationalAdjective("basierend",dbpedia:locationCountry,
    relationalArg = PrepositionalObject("in")),

  // numberOfStudents, facultySize

  RelationalNoun("enrollment",dbpedia:numberOfStudents,
     propSubj = PrepositionalObject("von"),
     propObj  = CopulativeArg),
  RelationalNoun(["Schüler"/noun "Bevölkerung"/noun],dbpedia:numberOfStudents,
    propSubj = PossessiveAdjunct,
    propObj  = CopulativeArg),

  StateVerb("dienen",dbpedia:numberOfStudents),
  StateVerb("Diensten",dbpedia:facultySize),

  RelationalNoun(["Lehrerschaft"/noun "Größe"/noun],dbpedia:facultySize,
    propSubj = PossessiveAdjunct,
    propObj  = CopulativeArg),

  // manufacturer, company 

  RelationalNoun("Hersteller",dbpedia:manufacturer,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg), 

  StateVerb("produzieren",dbpedia:manufacturer,
     propSubj = DirectObject,
     propObj  = Subject), 
  StateVerb("produzieren",dbpedia:manufacturer,
     propSubj = DirectObject,
     propObj  = Subject), 

  StateVerb("auswies",dbpedia:company,
     propSubj = DirectObject restrictedTo dbpedia:Canal,
     propObj  = Subject), 
  StateVerb("bauen",dbpedia:company,
     propSubj = DirectObject restrictedTo dbpedia:Canal,
     propObj  = Subject),


  // formationDate, formationYear, foundingDate, foundingYear, activeYears{Start|End}{Date|Year}

  RelationalNoun(["formation"/noun "date"/noun],dbpedia:formationDate,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg), 
  RelationalNoun(["formation"/noun "Jahr"/noun],dbpedia:formationYear,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg),

  RelationalNoun(["effizientem"/noun "date"/noun],dbpedia:foundingDate,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg), 
  RelationalNoun(["effizientem"/noun "Jahr"/noun],dbpedia:foundingYear,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg),

  ConsequenceVerb("Format",dbpedia:formationDate,
     propSubj = lex:organization as Subject, 
     propObj  = lex:date as PrepositionalObject("auf")),
  ConsequenceVerb("Format",dbpedia:formationYear,
     propSubj = lex:organization as Subject, 
     propObj  = lex:date as PrepositionalObject("in")),

  ConsequenceVerb("fanden",dbpedia:foundingDate,
     propSubj = lex:organization as Subject, 
     propObj  = lex:date as PrepositionalObject("auf")),
  ConsequenceVerb("fanden",dbpedia:foundingYear,
     propSubj = lex:organization as Subject, 
     propObj  = lex:date as PrepositionalObject("in")),

  ConsequenceVerb("schaffen",dbpedia:formationDate,
     propSubj = lex:organization as Subject, 
     propObj  = lex:date as PrepositionalObject("auf")),
  ConsequenceVerb("schaffen",dbpedia:formationYear,
     propSubj = lex:organization as Subject, 
     propObj  = lex:date as PrepositionalObject("in")),
  ConsequenceVerb("schaffen",dbpedia:foundingDate,
     propSubj = lex:organization as Subject, 
     propObj  = lex:date as PrepositionalObject("auf")),
  ConsequenceVerb("schaffen",dbpedia:foundingYear,
     propSubj = lex:organization as Subject, 
     propObj  = lex:date as PrepositionalObject("in")),

  RelationalAdjective("aktiv",dbpedia:activeYearsStartDate, 
     relationalArg = PrepositionalObject("seit")), 
  RelationalAdjective("aktiv",dbpedia:activeYearsStartYear, 
     relationalArg = PrepositionalObject("seit")), 
  RelationalAdjective("aktiv",dbpedia:activeYearsEndDate, 
     relationalArg = PrepositionalObject("bis")), 
  RelationalAdjective("aktiv",dbpedia:activeYearsEndYear, 
     relationalArg = PrepositionalObject("bis")), 

  // foundingPerson, foundedBy

  StateVerb("fanden",dbpedia:foundingPerson,
     propSubj = DirectObject,
     propObj  = Subject),
  StateVerb("schaffen",dbpedia:foundingPerson,
     propSubj = DirectObject,
     propObj  = Subject),
  StateVerb("fanden",dbpedia:foundedBy,
     propSubj = DirectObject,
     propObj  = Subject),
  StateVerb("schaffen",dbpedia:foundedBy,
     propSubj = DirectObject,
     propObj  = Subject),
  RelationalNoun("Gründer",dbpedia:foundedBy,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg),
  RelationalNoun("Gründer",dbpedia:foundingPerson,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg),

  // foundationPlace 

  RelationalNoun(["Stiftung"/noun "Ort"/noun],dbpedia:foundationPlace,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg), 

  ConsequenceVerb("fanden",dbpedia:foundationPlace,
     propSubj = lex:organization as Subject, 
     propObj  = lex:date as PrepositionalObject("in")),


  // mascot, slogan, title

  RelationalNoun("du",dbpedia:mascot,
     propSubj = PossessiveAdjunct,
     propObj  = CopulativeArg), 
  RelationalNoun("Slogan",dbpedia:slogan,
    propSubj = PossessiveAdjunct,
    propObj  = CopulativeArg), 

  RelationalAdjective("bekanntermaßen",dbpedia:title,
    relationalArg = PrepositionalObject("as")),


  // affiliation

  RelationalAdjective("verbundenen",dbpedia:affiliation, 
     relationalArg = PrepositionalObject("mit")),
  RelationalAdjective("verbundenen",dbpedia:affiliation, 
     relationalArg = PrepositionalObject("zu")), 

  // frequency 

  RelationalNoun("Häufigkeit",dbpedia:frequency,
    propSubj = PossessiveAdjunct,
    propObj  = CopulativeArg), 

  StateVerb("ausgestrahlt",dbpedia:frequency,
    propObj = PrepositionalObject("auf")),


  // status 

  RelationalNoun("Status",dbpedia:status,
    propSubj = PossessiveAdjunct,
    propObj  = CopulativeArg), 
  IntersectiveDataPropertyAdjective("aktiv",dbpedia:status,"aktive"),
  IntersectiveDataPropertyAdjective("pensioniert",dbpedia:status,"pensioniert"),
  IntersectiveDataPropertyAdjective("operationellen",dbpedia:status,"operationelle"),
  IntersectiveDataPropertyAdjective("ausgesondert",dbpedia:status,"ausgesondert"), 

  // product 

  RelationalNoun("Produkt",dbpedia:product,
    propSubj = PossessiveAdjunct,
    propObj  = CopulativeArg),
  StateVerb("produzieren",dbpedia:product), 
  StateVerb("erschaffen",dbpedia:product), 
  StateVerb("entwickeln",dbpedia:product), 

  // {owning|parent}Company, owner

  RelationalNoun("Eigentümers",dbpedia:owner,
    propSubj = PossessiveAdjunct,
    propObj  = CopulativeArg),
  StateVerb("eigenen",dbpedia:owner,
     propSubj = DirectObject,
     propObj  = Subject), 
  StateVerb("eigenen",dbpedia:owningCompany,
     propSubj = DirectObject,
     propObj  = Subject), 
  StateVerb("eigenen",dbpedia:owningOrganization,
     propSubj = DirectObject,
     propObj  = Subject), 
  RelationalNoun(["Elternteil"/noun "Begünstigten"/noun],dbpedia:owningCompany,
    propSubj = PossessiveAdjunct,
    propObj  = CopulativeArg),
  RelationalNoun(["Tochter"/noun "Begünstigten"/noun],dbpedia:owningCompany,
    propObj  = PossessiveAdjunct),
  RelationalNoun("Tochtergesellschaft",dbpedia:owningCompany,
    propObj  = PossessiveAdjunct), 
  RelationalNoun(["Elternteil"/noun "Begünstigten"/noun],dbpedia:parentCompany,
    propSubj = PossessiveAdjunct,
    propObj  = CopulativeArg),
  RelationalNoun(["Tochter"/noun "Begünstigten"/noun],dbpedia:parentCompany,
    propObj  = PossessiveAdjunct),
  RelationalNoun("Tochtergesellschaft",dbpedia:parentCompany,
    propObj  = PossessiveAdjunct), 


  // others

  RelationalNoun("Einnahmen-",dbpedia:revenue,
    propSubj = PossessiveAdjunct,
    propObj  = CopulativeArg), 

  RelationalNoun(["amtlichen"/adjective "Farbe"/noun],dbpedia:officialSchoolColour,
    propSubj = PossessiveAdjunct,
    propObj  = CopulativeArg), 

  StateVerb("operieren",dbpedia:regionServed, 
    propObj  = PrepositionalObject("in")), 

  IntersectiveObjectPropertyAdjective("social-democratic",dbpedia:ideology,resource:Social_democracy), 
  IntersectiveObjectPropertyAdjective("conservatist",dbpedia:ideology,resource:Conservatism), 
  IntersectiveObjectPropertyAdjective("liberale",dbpedia:ideology,resource:Liberalism), 
  IntersectiveObjectPropertyAdjective("kommunistischen",dbpedia:ideology,resource:Communism), 
  IntersectiveObjectPropertyAdjective("Sozialistischen",dbpedia:ideology,resource:Socialism), 
  IntersectiveObjectPropertyAdjective("Christian demokratische",dbpedia:ideology,resource:Christian_democracy), 
  IntersectiveObjectPropertyAdjective("nationalistic",dbpedia:ideology,resource:Nationalism), 
  IntersectiveObjectPropertyAdjective("Marxist-Leninist",dbpedia:ideology,resource:Marxism_Leninism), 
  IntersectiveObjectPropertyAdjective("Marxist",dbpedia:ideology,resource:Marxism)

)
